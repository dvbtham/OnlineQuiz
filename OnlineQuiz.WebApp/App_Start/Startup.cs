using Autofac; using Autofac.Integration.Mvc; using Autofac.Integration.WebApi; using Microsoft.Owin; using OnlineQuiz.Model; using OnlineQuiz.Model.Infrastructure; using OnlineQuiz.Model.Repositories; using OnlineQuiz.Service.Services; using OnlineQuiz.WebApp.Areas.Admin.Mapping; using Owin; using System.Globalization; using System.Linq; using System.Reflection; using System.Web.Http; using System.Web.Mvc; using OnlineQuiz.Model.Entity;  [assembly: OwinStartup(typeof(OnlineQuiz.WebApp.App_Start.Startup))]  namespace OnlineQuiz.WebApp.App_Start {     public partial class Startup     {         public void Configuration(IAppBuilder app)         {             // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888             ConfigAutofac(app);             new MappingProfile();             var cul = CultureInfo.GetCultureInfo("vi-VN");             CultureInfo.DefaultThreadCurrentCulture = cul;         }          private void ConfigAutofac(IAppBuilder app)         {             var builder = new ContainerBuilder();             builder.RegisterControllers(Assembly.GetExecutingAssembly());             // Register your Web API controllers.             builder.RegisterApiControllers(Assembly.GetExecutingAssembly()); //Register WebApi Controllers              builder.RegisterType<UnitOfWork>().As<IUnitOfWork>().InstancePerRequest();             builder.RegisterType<DbFactory>().As<IDbFactory>().InstancePerRequest();              builder.RegisterType<OnlineQuizDbContext>().AsSelf().InstancePerRequest();              // Repositories             builder.RegisterAssemblyTypes(typeof(QuestionRepository).Assembly)                 .Where(t => t.Name.EndsWith("Repository"))                 .AsImplementedInterfaces().InstancePerRequest();              // Services             builder.RegisterAssemblyTypes(typeof(ExaminationService).Assembly)                .Where(t => t.Name.EndsWith("Service"))                .AsImplementedInterfaces().InstancePerRequest();              var container = builder.Build();             DependencyResolver.SetResolver(new AutofacDependencyResolver(container));              GlobalConfiguration.Configuration.DependencyResolver = new AutofacWebApiDependencyResolver(container); //Set the WebApi DependencyResolver         }     } }